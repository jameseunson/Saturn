///
/// @Generated by Mockolo
///



import Combine
import Firebase
import FirebaseCore
import FirebaseDatabase
import Foundation
import Network
import SwiftUI
import UIKit
import os
@testable import Saturn


class APIMemoryResponseCachingMock: APIMemoryResponseCaching {
    init() { }


    private(set) var setCallCount = 0
    var setHandler: ((APIMemoryResponseCacheValue, String) -> ())?
    func set(value: APIMemoryResponseCacheValue, for key: String)  {
        setCallCount += 1
        if let setHandler = setHandler {
            setHandler(value, key)
        }
        
    }

    private(set) var getCallCount = 0
    var getHandler: ((String) -> (APIMemoryResponseCacheItem?))?
    func get(for key: String) -> APIMemoryResponseCacheItem? {
        getCallCount += 1
        if let getHandler = getHandler {
            return getHandler(key)
        }
        return nil
    }
}

class SettingsManagingMock: SettingsManaging {
    init() { }


    private(set) var setCallCount = 0
    var setHandler: ((SettingValue, SettingKey) -> ())?
    func set(value: SettingValue, for key: SettingKey)  {
        setCallCount += 1
        if let setHandler = setHandler {
            setHandler(value, key)
        }
        
    }

    private(set) var boolCallCount = 0
    var boolHandler: ((SettingKey) -> (Bool))?
    func bool(for key: SettingKey) -> Bool {
        boolCallCount += 1
        if let boolHandler = boolHandler {
            return boolHandler(key)
        }
        return false
    }

    private(set) var indentationColorCallCount = 0
    var indentationColorHandler: (() -> (SettingIndentationColor?))?
    func indentationColor() -> SettingIndentationColor? {
        indentationColorCallCount += 1
        if let indentationColorHandler = indentationColorHandler {
            return indentationColorHandler()
        }
        return nil
    }

    private(set) var colorCallCount = 0
    var colorHandler: ((SettingKey) -> (Color?))?
    func color(for key: SettingKey) -> Color? {
        colorCallCount += 1
        if let colorHandler = colorHandler {
            return colorHandler(key)
        }
        return nil
    }

    private(set) var searchHistoryCallCount = 0
    var searchHistoryHandler: (() -> (SettingSearchHistory))?
    func searchHistory() -> SettingSearchHistory {
        searchHistoryCallCount += 1
        if let searchHistoryHandler = searchHistoryHandler {
            return searchHistoryHandler()
        }
        fatalError("searchHistoryHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var dateCallCount = 0
    var dateHandler: ((SettingKey) -> (Date?))?
    func date(for key: SettingKey) -> Date? {
        dateCallCount += 1
        if let dateHandler = dateHandler {
            return dateHandler(key)
        }
        return nil
    }

    private(set) var intCallCount = 0
    var intHandler: ((SettingKey) -> (Int))?
    func int(for key: SettingKey) -> Int {
        intCallCount += 1
        if let intHandler = intHandler {
            return intHandler(key)
        }
        return 0
    }
}

class NetworkConnectivityManagingMock: NetworkConnectivityManaging {
    init() { }


    var isConnectedPublisher: AnyPublisher<Bool, Never> { return self.isConnectedPublisherSubject.eraseToAnyPublisher() }
    private(set) var isConnectedPublisherSubject = PassthroughSubject<Bool, Never>()

    private(set) var startCallCount = 0
    var startHandler: (() -> ())?
    func start()  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler()
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: (() -> ())?
    func stop()  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }

    private(set) var updateConnectedCallCount = 0
    var updateConnectedHandler: ((Bool) -> ())?
    func updateConnected(with isConnected: Bool)  {
        updateConnectedCallCount += 1
        if let updateConnectedHandler = updateConnectedHandler {
            updateConnectedHandler(isConnected)
        }
        
    }

    private(set) var isConnectedCallCount = 0
    var isConnectedHandler: (() -> (Bool))?
    func isConnected() -> Bool {
        isConnectedCallCount += 1
        if let isConnectedHandler = isConnectedHandler {
            return isConnectedHandler()
        }
        return false
    }
}

class APIManagingMock: APIManaging {
    init() { }


    private(set) var loadStoriesCallCount = 0
    var loadStoriesHandler: (([Int], APIMemoryResponseCacheBehavior) -> (AnyPublisher<[APIResponse<Story>], Error>))?
    func loadStories(ids: [Int], cacheBehavior: APIMemoryResponseCacheBehavior) -> AnyPublisher<[APIResponse<Story>], Error> {
        loadStoriesCallCount += 1
        if let loadStoriesHandler = loadStoriesHandler {
            return loadStoriesHandler(ids, cacheBehavior)
        }
        fatalError("loadStoriesHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var loadStoriesIdsCallCount = 0
    var loadStoriesIdsHandler: (([Int], APIMemoryResponseCacheBehavior) async throws -> (APIResponse<[Story]>))?
    func loadStories(ids: [Int], cacheBehavior: APIMemoryResponseCacheBehavior) async throws -> APIResponse<[Story]> {
        loadStoriesIdsCallCount += 1
        if let loadStoriesIdsHandler = loadStoriesIdsHandler {
            return try await loadStoriesIdsHandler(ids, cacheBehavior)
        }
        fatalError("loadStoriesIdsHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var loadStoryIdsCallCount = 0
    var loadStoryIdsHandler: ((StoryListType, APIMemoryResponseCacheBehavior) -> (AnyPublisher<APIResponse<Array<Int>>, Error>))?
    func loadStoryIds(type: StoryListType, cacheBehavior: APIMemoryResponseCacheBehavior) -> AnyPublisher<APIResponse<Array<Int>>, Error> {
        loadStoryIdsCallCount += 1
        if let loadStoryIdsHandler = loadStoryIdsHandler {
            return loadStoryIdsHandler(type, cacheBehavior)
        }
        fatalError("loadStoryIdsHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var loadStoryIdsTypeCallCount = 0
    var loadStoryIdsTypeHandler: ((StoryListType, APIMemoryResponseCacheBehavior) async throws -> (APIResponse<Array<Int>>))?
    func loadStoryIds(type: StoryListType, cacheBehavior: APIMemoryResponseCacheBehavior) async throws -> APIResponse<Array<Int>> {
        loadStoryIdsTypeCallCount += 1
        if let loadStoryIdsTypeHandler = loadStoryIdsTypeHandler {
            return try await loadStoryIdsTypeHandler(type, cacheBehavior)
        }
        fatalError("loadStoryIdsTypeHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var loadStoryCallCount = 0
    var loadStoryHandler: ((Int, APIMemoryResponseCacheBehavior) -> (AnyPublisher<APIResponse<Story>, Error>))?
    func loadStory(id: Int, cacheBehavior: APIMemoryResponseCacheBehavior) -> AnyPublisher<APIResponse<Story>, Error> {
        loadStoryCallCount += 1
        if let loadStoryHandler = loadStoryHandler {
            return loadStoryHandler(id, cacheBehavior)
        }
        fatalError("loadStoryHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var loadStoryIdCallCount = 0
    var loadStoryIdHandler: ((Int, APIMemoryResponseCacheBehavior) async throws -> (APIResponse<Story>))?
    func loadStory(id: Int, cacheBehavior: APIMemoryResponseCacheBehavior) async throws -> APIResponse<Story> {
        loadStoryIdCallCount += 1
        if let loadStoryIdHandler = loadStoryIdHandler {
            return try await loadStoryIdHandler(id, cacheBehavior)
        }
        fatalError("loadStoryIdHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var loadCommentCallCount = 0
    var loadCommentHandler: ((Int, APIMemoryResponseCacheBehavior) -> (AnyPublisher<APIResponse<Comment>, Error>))?
    func loadComment(id: Int, cacheBehavior: APIMemoryResponseCacheBehavior) -> AnyPublisher<APIResponse<Comment>, Error> {
        loadCommentCallCount += 1
        if let loadCommentHandler = loadCommentHandler {
            return loadCommentHandler(id, cacheBehavior)
        }
        fatalError("loadCommentHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var loadCommentIdCallCount = 0
    var loadCommentIdHandler: ((Int, APIMemoryResponseCacheBehavior) async throws -> (APIResponse<Comment>))?
    func loadComment(id: Int, cacheBehavior: APIMemoryResponseCacheBehavior) async throws -> APIResponse<Comment> {
        loadCommentIdCallCount += 1
        if let loadCommentIdHandler = loadCommentIdHandler {
            return try await loadCommentIdHandler(id, cacheBehavior)
        }
        fatalError("loadCommentIdHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var loadUserItemCallCount = 0
    var loadUserItemHandler: ((Int) -> (AnyPublisher<UserItem, Error>))?
    func loadUserItem(id: Int) -> AnyPublisher<UserItem, Error> {
        loadUserItemCallCount += 1
        if let loadUserItemHandler = loadUserItemHandler {
            return loadUserItemHandler(id)
        }
        fatalError("loadUserItemHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var loadUserItemIdCallCount = 0
    var loadUserItemIdHandler: ((Int) async throws -> (UserItem))?
    func loadUserItem(id: Int) async throws -> UserItem {
        loadUserItemIdCallCount += 1
        if let loadUserItemIdHandler = loadUserItemIdHandler {
            return try await loadUserItemIdHandler(id)
        }
        fatalError("loadUserItemIdHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var loadUserItemsCallCount = 0
    var loadUserItemsHandler: (([Int]) -> (AnyPublisher<[UserItem], Error>))?
    func loadUserItems(ids: [Int]) -> AnyPublisher<[UserItem], Error> {
        loadUserItemsCallCount += 1
        if let loadUserItemsHandler = loadUserItemsHandler {
            return loadUserItemsHandler(ids)
        }
        fatalError("loadUserItemsHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var loadUserItemsIdsCallCount = 0
    var loadUserItemsIdsHandler: (([Int]) async throws -> ([UserItem]))?
    func loadUserItems(ids: [Int]) async throws -> [UserItem] {
        loadUserItemsIdsCallCount += 1
        if let loadUserItemsIdsHandler = loadUserItemsIdsHandler {
            return try await loadUserItemsIdsHandler(ids)
        }
        return [UserItem]()
    }

    private(set) var loadUserCallCount = 0
    var loadUserHandler: ((String) -> (AnyPublisher<User, Error>))?
    func loadUser(id: String) -> AnyPublisher<User, Error> {
        loadUserCallCount += 1
        if let loadUserHandler = loadUserHandler {
            return loadUserHandler(id)
        }
        fatalError("loadUserHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var getImageCallCount = 0
    var getImageHandler: ((StoryRowViewModel) async throws -> (Image))?
    func getImage(for story: StoryRowViewModel) async throws -> Image {
        getImageCallCount += 1
        if let getImageHandler = getImageHandler {
            return try await getImageHandler(story)
        }
        fatalError("getImageHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var hasCachedResponseCallCount = 0
    var hasCachedResponseHandler: ((Int) -> (Bool))?
    func hasCachedResponse(for id: Int) -> Bool {
        hasCachedResponseCallCount += 1
        if let hasCachedResponseHandler = hasCachedResponseHandler {
            return hasCachedResponseHandler(id)
        }
        return false
    }
}

class FileManagingMock: FileManaging {
    init() { }


    private(set) var fileExistsCallCount = 0
    var fileExistsHandler: ((String) -> (Bool))?
    func fileExists(atPath path: String) -> Bool {
        fileExistsCallCount += 1
        if let fileExistsHandler = fileExistsHandler {
            return fileExistsHandler(path)
        }
        return false
    }

    private(set) var removeItemCallCount = 0
    var removeItemHandler: ((String) throws -> ())?
    func removeItem(atPath path: String) throws  {
        removeItemCallCount += 1
        if let removeItemHandler = removeItemHandler {
            try removeItemHandler(path)
        }
        
    }

    private(set) var createFileCallCount = 0
    var createFileHandler: ((String, Data?, [FileAttributeKey : Any]?) -> (Bool))?
    func createFile(atPath path: String, contents data: Data?, attributes attr: [FileAttributeKey : Any]?) -> Bool {
        createFileCallCount += 1
        if let createFileHandler = createFileHandler {
            return createFileHandler(path, data, attr)
        }
        return false
    }

    private(set) var contentsCallCount = 0
    var contentsHandler: ((String) -> (Data?))?
    func contents(atPath path: String) -> Data? {
        contentsCallCount += 1
        if let contentsHandler = contentsHandler {
            return contentsHandler(path)
        }
        return nil
    }

    private(set) var attributesOfItemCallCount = 0
    var attributesOfItemHandler: ((String) throws -> ([FileAttributeKey : Any]))?
    func attributesOfItem(atPath path: String) throws -> [FileAttributeKey : Any] {
        attributesOfItemCallCount += 1
        if let attributesOfItemHandler = attributesOfItemHandler {
            return try attributesOfItemHandler(path)
        }
        return [FileAttributeKey : Any]()
    }

    private(set) var contentsOfDirectoryCallCount = 0
    var contentsOfDirectoryHandler: ((URL, [URLResourceKey]?, FileManager.DirectoryEnumerationOptions) throws -> ([URL]))?
    func contentsOfDirectory(at url: URL, includingPropertiesForKeys keys: [URLResourceKey]?, options mask: FileManager.DirectoryEnumerationOptions) throws -> [URL] {
        contentsOfDirectoryCallCount += 1
        if let contentsOfDirectoryHandler = contentsOfDirectoryHandler {
            return try contentsOfDirectoryHandler(url, keys, mask)
        }
        return [URL]()
    }

    private(set) var createDirectoryCallCount = 0
    var createDirectoryHandler: ((URL, Bool, [FileAttributeKey : Any]?) throws -> ())?
    func createDirectory(at url: URL, withIntermediateDirectories createIntermediates: Bool, attributes: [FileAttributeKey : Any]?) throws  {
        createDirectoryCallCount += 1
        if let createDirectoryHandler = createDirectoryHandler {
            try createDirectoryHandler(url, createIntermediates, attributes)
        }
        
    }

    private(set) var urlsCallCount = 0
    var urlsHandler: ((FileManager.SearchPathDirectory, FileManager.SearchPathDomainMask) -> ([URL]))?
    func urls(for directory: FileManager.SearchPathDirectory, in domainMask: FileManager.SearchPathDomainMask) -> [URL] {
        urlsCallCount += 1
        if let urlsHandler = urlsHandler {
            return urlsHandler(directory, domainMask)
        }
        return [URL]()
    }
}

class DatabaseReferencingMock: DatabaseReferencing {
    init() { }


    private(set) var childPathCallCount = 0
    var childPathHandler: ((String) -> (DatabaseReferencing))?
    func childPath(_ pathString: String) -> DatabaseReferencing {
        childPathCallCount += 1
        if let childPathHandler = childPathHandler {
            return childPathHandler(pathString)
        }
        return DatabaseReferencingMock()
    }

    private(set) var getChildDataCallCount = 0
    var getChildDataHandler: ((@escaping (Error?, DataShapshotting?) -> Void) -> ())?
    func getChildData(completion block: @escaping (Error?, DataShapshotting?) -> Void)  {
        getChildDataCallCount += 1
        if let getChildDataHandler = getChildDataHandler {
            getChildDataHandler(block)
        }
        
    }
}

class DataShapshottingMock: DataShapshotting {
    init() { }
    init(value: Any? = nil) {
        self.value = value
    }


    private(set) var valueSetCallCount = 0
    var value: Any? = nil { didSet { valueSetCallCount += 1 } }
}

