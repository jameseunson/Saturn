///
/// @Generated by Mockolo
///

@testable import Saturn
import Combine
import Firebase
import FirebaseCore
import FirebaseDatabase
import Foundation
import SwiftUI
import UIKit
import os


class APIMemoryResponseCachingMock: APIMemoryResponseCaching {
    init() { }


    private(set) var setCallCount = 0
    var setHandler: ((APIMemoryResponseCacheValue, String) -> ())?
    func set(value: APIMemoryResponseCacheValue, for key: String)  {
        setCallCount += 1
        if let setHandler = setHandler {
            setHandler(value, key)
        }
        
    }

    private(set) var getCallCount = 0
    var getHandler: ((String) -> (APIMemoryResponseCacheItem?))?
    func get(for key: String) -> APIMemoryResponseCacheItem? {
        getCallCount += 1
        if let getHandler = getHandler {
            return getHandler(key)
        }
        return nil
    }
}

class FileManagingMock: FileManaging {
    init() { }


    private(set) var fileExistsCallCount = 0
    var fileExistsHandler: ((String) -> (Bool))?
    func fileExists(atPath path: String) -> Bool {
        fileExistsCallCount += 1
        if let fileExistsHandler = fileExistsHandler {
            return fileExistsHandler(path)
        }
        return false
    }

    private(set) var removeItemCallCount = 0
    var removeItemHandler: ((String) throws -> ())?
    func removeItem(atPath path: String) throws  {
        removeItemCallCount += 1
        if let removeItemHandler = removeItemHandler {
            try removeItemHandler(path)
        }
        
    }

    private(set) var createFileCallCount = 0
    var createFileHandler: ((String, Data?, [FileAttributeKey : Any]?) -> (Bool))?
    func createFile(atPath path: String, contents data: Data?, attributes attr: [FileAttributeKey : Any]?) -> Bool {
        createFileCallCount += 1
        if let createFileHandler = createFileHandler {
            return createFileHandler(path, data, attr)
        }
        return false
    }

    private(set) var contentsCallCount = 0
    var contentsHandler: ((String) -> (Data?))?
    func contents(atPath path: String) -> Data? {
        contentsCallCount += 1
        if let contentsHandler = contentsHandler {
            return contentsHandler(path)
        }
        return nil
    }

    private(set) var attributesOfItemCallCount = 0
    var attributesOfItemHandler: ((String) throws -> ([FileAttributeKey : Any]))?
    func attributesOfItem(atPath path: String) throws -> [FileAttributeKey : Any] {
        attributesOfItemCallCount += 1
        if let attributesOfItemHandler = attributesOfItemHandler {
            return try attributesOfItemHandler(path)
        }
        return [FileAttributeKey : Any]()
    }

    private(set) var contentsOfDirectoryCallCount = 0
    var contentsOfDirectoryHandler: ((URL, [URLResourceKey]?, FileManager.DirectoryEnumerationOptions) throws -> ([URL]))?
    func contentsOfDirectory(at url: URL, includingPropertiesForKeys keys: [URLResourceKey]?, options mask: FileManager.DirectoryEnumerationOptions) throws -> [URL] {
        contentsOfDirectoryCallCount += 1
        if let contentsOfDirectoryHandler = contentsOfDirectoryHandler {
            return try contentsOfDirectoryHandler(url, keys, mask)
        }
        return [URL]()
    }

    private(set) var createDirectoryCallCount = 0
    var createDirectoryHandler: ((URL, Bool, [FileAttributeKey : Any]?) throws -> ())?
    func createDirectory(at url: URL, withIntermediateDirectories createIntermediates: Bool, attributes: [FileAttributeKey : Any]?) throws  {
        createDirectoryCallCount += 1
        if let createDirectoryHandler = createDirectoryHandler {
            try createDirectoryHandler(url, createIntermediates, attributes)
        }
        
    }

    private(set) var urlsCallCount = 0
    var urlsHandler: ((FileManager.SearchPathDirectory, FileManager.SearchPathDomainMask) -> ([URL]))?
    func urls(for directory: FileManager.SearchPathDirectory, in domainMask: FileManager.SearchPathDomainMask) -> [URL] {
        urlsCallCount += 1
        if let urlsHandler = urlsHandler {
            return urlsHandler(directory, domainMask)
        }
        return [URL]()
    }
}

class DatabaseReferencingMock: DatabaseReferencing {
    init() { }


    private(set) var childPathCallCount = 0
    var childPathHandler: ((String) -> (DatabaseReferencing))?
    func childPath(_ pathString: String) -> DatabaseReferencing {
        childPathCallCount += 1
        if let childPathHandler = childPathHandler {
            return childPathHandler(pathString)
        }
        return DatabaseReferencingMock()
    }

    private(set) var getChildDataCallCount = 0
    var getChildDataHandler: ((@escaping (Error?, DataShapshotting?) -> Void) -> ())?
    func getChildData(completion block: @escaping (Error?, DataShapshotting?) -> Void)  {
        getChildDataCallCount += 1
        if let getChildDataHandler = getChildDataHandler {
            getChildDataHandler(block)
        }
        
    }
}

class DataShapshottingMock: DataShapshotting {
    init() { }
    init(value: Any? = nil) {
        self.value = value
    }


    private(set) var valueSetCallCount = 0
    var value: Any? = nil { didSet { valueSetCallCount += 1 } }
}

